name: CD Staging Workflow

# Summary:
# This workflow is triggered on push and pull requests to the development branch.
# It consists of three jobs:
# 1. Build Staging:
#    - Checks out the code.
#    - Sets up Python 3.8.
#    - Installs dependencies.
# 2. Deploy to Staging:
#    - Runs only if the build-staging job succeeds.
#    - Checks out the code.
#    - Optionally downloads test results.
#    - Triggers a deployment via a Render Deploy Hook using a secure URL stored in GitHub Secrets.
# 3. Integration Test:
#    - Runs only if the deploy-staging job succeeds.
#    - Runs integration tests on the deployed staging environment.


on:
  push:
    branches:
      - development
  pull_request:
    branches:
      - development

jobs:
    build-staging:
        # runs on the development branch
        if: ${{ github.ref == 'refs/heads/development' }}
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Set up Python
              uses: actions/setup-python@v2
              with:
                python-version: '3.8'

            - name: Install dependencies
              run: |
                python -m pip install --upgrade pip
                pip install -r requirements.txt

    # Job to deploy to staging environment
    deploy-staging:
        # runs on the development branch
        if: ${{ github.ref == 'refs/heads/development' }}
        runs-on: ubuntu-latest
        needs: build-staging
        steps:
          - name: Checkout code
            uses: actions/checkout@v3

          # Skeleton step for downloading test results
          
          # Uncomment and configure the following steps if you want to download test results as artifacts
          # - name: Download test results
          #   uses: actions/download-artifact@v3
          #   with:
          #     name: test-results
          #     path: core/tests/test-results

          # Deploy via Render Deploy Hook
          - name: Trigger Render Deploy Hook (Staging)
            env:
              RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEV_DEPLOY_HOOK_URL }}  # Use GitHub Secrets for secure deploy hook URL management
            run: |
              curl -X POST $RENDER_DEPLOY_HOOK_URL

    # Job to run integration tests on the deployed staging environment
    integration-test:
        # runs on the development branch
        if: ${{ github.ref == 'refs/heads/development' }}
        runs-on: ubuntu-latest
        needs: deploy-staging
        steps:
          - name: Run integration tests
            run: |
              echo "======================================"
              echo "Running Integration Tests"
              echo "Running Regression Tests"
              echo "======================================"
              echo 'Integration tests complete'
