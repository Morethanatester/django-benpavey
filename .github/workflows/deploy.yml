name: CI/CD Deployment Pipeline

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - main

jobs:
  test-and-validate:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Unit Tests
      run: |
        python manage.py test core.tests

  deploy-to-pre-prod:
    runs-on: ubuntu-latest
    needs: test-and-validate

    steps:
    - uses: actions/checkout@v4
    - name: Set up Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Fetch All Branches
      run: |
        git fetch origin +refs/heads/*:refs/remotes/origin/*

    - name: Merge Dev into Pre-Prod
      run: |
        git checkout pre-prod
        git merge origin/dev --no-ff --allow-unrelated-histories -s recursive -X theirs -m "Merging changes from dev to pre-prod"

    - name: Push to Pre-Prod
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git push origin pre-prod

  create-pr-to-main:
    runs-on: ubuntu-latest
    needs: deploy-to-pre-prod

    steps:
    - uses: actions/checkout@v4

    - name: Create Pull Request to Main
      uses: peter-evans/create-pull-request@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: Merge pre-prod to main
        branch: pre-prod
        base: main
        title: 'Merge pre-prod to main'
        body: 'This is an automated pull request to merge changes from pre-prod to main.'

  merge-pr-to-main:
    runs-on: ubuntu-latest
    needs: create-pr-to-main

    steps:
    - name: Merge Pull Request
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const pr = await github.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            head: 'pre-prod',
            base: 'main'
          });
          if (pr.data.length > 0) {
            await github.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.data[0].number,
              merge_method: 'merge'
            });
          }