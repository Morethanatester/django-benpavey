name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - development
  pull_request:
    branches:
      - main
      - development

jobs:
  # Job to check code style and formatting
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run flake8
        run: flake8 .

  # Job to build the project
  build:
    runs-on: ubuntu-latest
    needs: lint
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build project
        run: ./build.sh

  # Job to run unit tests
  test:
    runs-on: ubuntu-latest
    needs: build
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit tests
        run: |
          mkdir -p core/tests/test-results
          python manage.py test core.tests --junitxml=core/tests/test-results/results.xml

      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: core/tests/test-results

  # Job to deploy to development environment
  deploy-dev:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/development' || (github.event_name == 'pull_request' && github.base_ref == 'development')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download test results
        uses: actions/download-artifact@v2
        with:
          name: test-results
          path: core/tests/test-results

      # Deploy via Render Deploy Hook
      - name: Trigger Render Deploy Hook (Development)
        env:
          RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEV_DEPLOY_HOOK_URL }}  # Use GitHub Secrets for secure deploy hook URL management
        run: |
          curl -X POST $RENDER_DEPLOY_HOOK_URL

  # Job to run integration tests on the deployed development environment
  integration-test:
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: github.ref == 'refs/heads/development' || (github.event_name == 'pull_request' && github.base_ref == 'development')
    steps:
      - name: Run integration tests
        run: echo 'Integration tests complete'

  # Job to deploy to production environment
  deploy-prod:
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.base_ref == 'main')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download test results
        uses: actions/download-artifact@v2
        with:
          name: test-results
          path: core/tests/test-results

      # Deploy via Render Deploy Hook
      - name: Trigger Render Deploy Hook (Production)
        env:
          RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_PROD_DEPLOY_HOOK_URL }}  # Use GitHub Secrets for secure deploy hook URL management
        run: |
          curl -X POST $RENDER_DEPLOY_HOOK_URL