name: Restrict PRs to Main and Validate Commits

# Summary:
# This workflow enforces certain rules on pull requests:
# 1. Disallow direct PRs from feature/* branches to main.
# 2. Allow PRs from dev* or development branches to main.
# 3. Allow PRs to the development branch.
# 4. Validate commit messages follow the conventional commit format.
# 5. Validate release workflow conventions for release/* branches.

on:
  pull_request:
    branches:
      - main
      - development

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Check PR Source Branch
      - name: Check PR Source Branch
        id: branch-check
        run: |
          echo "Validating PR source branch..."
          SOURCE_BRANCH=${{ github.event.pull_request.head.ref }}
          TARGET_BRANCH=${{ github.event.pull_request.base.ref }}
          
          echo "Source branch: $SOURCE_BRANCH"
          echo "Target branch: $TARGET_BRANCH"
          
          # Allow PRs to development
          if [[ "$TARGET_BRANCH" == "development" ]]; then
            echo "PR to development is allowed."
            exit 0
          fi
          
          # Block PRs to main from feature/*
          if [[ "$TARGET_BRANCH" == "main" && "$SOURCE_BRANCH" == feature/* ]]; then
            echo "Direct PRs from feature branches to main are not allowed."
            exit 1
          fi
          
          # Allow PRs to main from development
          if [[ "$TARGET_BRANCH" == "main" && ( "$SOURCE_BRANCH" == dev* || "$SOURCE_BRANCH" == development ) ]]; then
            echo "PR from development branch to main is allowed."
            exit 0
          fi

          echo "PR from branch $SOURCE_BRANCH to $TARGET_BRANCH is not allowed."
          exit 1

      # Validate Commit Messages
      - name: Validate Commit Messages
        id: commit-check
        run: |
          echo "Checking commit messages for compliance..."
          INVALID_COMMIT=0
          # Fetch the commit messages
          git fetch --depth=1 origin ${{ github.event.pull_request.head.ref }}
          COMMITS=$(git log --pretty=format:"%s" origin/${{ github.event.pull_request.head.ref }})
          
          # Check each commit message
          echo "$COMMITS" | while read -r COMMIT; do
            if ! [[ "$COMMIT" =~ ^(fix|feat|chore|docs|style|refactor|test|ci|release)\(.+\):\ .+ ]]; then
              echo "Invalid commit message: $COMMIT"
              INVALID_COMMIT=1
            fi
          done

          if [[ $INVALID_COMMIT -eq 1 ]]; then
            echo "One or more commit messages do not follow the conventional commit format."
            exit 1
          else
            echo "All commit messages are valid."
          fi

      # Ensure compliance with release workflow conventions
      - name: Validate Release Workflow Conventions
        if: ${{ steps.branch-check.outputs.result == 'success' && steps.commit-check.outputs.result == 'success' }}
        run: |
          echo "Checking release workflow conventions..."
          if [[ "$SOURCE_BRANCH" == release/* ]]; then
            echo "PR is part of the release workflow. Validating..."
            # Add additional checks for release workflow here, e.g., checking tags, etc.
          else
            echo "This is not a release branch. Skipping release workflow validation."
          fi